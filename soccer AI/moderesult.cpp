//=============================================================================
//
// マネージャーの処理 [modetitle.cpp]
// Author : NAGAOKA YUKI
//
//=============================================================================
#include "mode.h"
#include "moderesult.h"
#include "manager.h"
#include "renderer.h"
#include "modegame.h"
#include "input.h"
#include "bg.h"
#include "modetitle.h"

///////////////////////////////////////////////
//
//		マクロ定義
//
////////////////////////////////////////////////

///////////////////////////////////////////////
//
//		静的メンバ変数
//
////////////////////////////////////////////////
CBg *CModeResult::m_pBg = NULL;

///////////////////////////////////////////////
//
//		コンストラクタ
//
////////////////////////////////////////////////
CModeResult::CModeResult()
{
	
}

///////////////////////////////////////////////
//
//		初期化処理
//
////////////////////////////////////////////////
CModeResult::~CModeResult()
{
}

///////////////////////////////////////////////
//
//		初期化処理
//
////////////////////////////////////////////////
void CModeResult::Init(void)
{
	m_pBg = CBg::Create(CBg::BG_TYPE_RESULT);
}

///////////////////////////////////////////////
//
//		終了処理
//
////////////////////////////////////////////////
void CModeResult::Uninit(void)
{
	// オブジェクトの破棄
	CScene::ReleaseAll();
}

///////////////////////////////////////////////
//
//		更新処理
//
////////////////////////////////////////////////
void CModeResult::Update(void)
{
	// デバイス取得
	CInputKeyboard *pInput = CManager::GetKeyboard();

	if(pInput->GetKeyTrigger(DIK_RETURN))
	{
		CManager::SetMode(new CModeTitle);
	}
}

///////////////////////////////////////////////
//
//		描画処理
//
////////////////////////////////////////////////
void CModeResult::Draw(void)
{
	m_pBg->Draw();
}
